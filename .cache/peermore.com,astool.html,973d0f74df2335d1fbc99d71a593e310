status: 304
content-length: 38829
content-location: http://peermore.com/astool.html
accept-ranges: bytes
server: Apache/2.2.8 (Ubuntu) mod_wsgi/2.0 Python/2.5.2
last-modified: Mon, 21 Apr 2008 20:02:29 GMT
etag: "14915-97ad-44b6794529f40"
date: Wed, 08 Jun 2011 15:10:49 GMT
content-type: text/html

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en"><head>
    <link rel="stylesheet" href="/peermore.css" />
    <link rel="stylesheet" href="/purple.css" />
<title>The Computer as Tool: From Interaction To Augmentation</title>
</head>
<body>
    <div style="float:right"><a href="/"><img height="50" src="/images/peermore.png" alt="Peermore Limited" /></a></div>
<h1 class="title">The Computer as Tool: From Interaction To Augmentation</h1>
<p class="authors">Chris Dent &lt;cdent@peermore.com&gt;<br />
</p>
<p class="docinfo">December 7, 2001</p>
<h2><a name="nid21K" id="nid21K"></a>Introduction &nbsp;&nbsp; <a class="nid" title="21K" href="#nid21K">#</a></h2>
<p><a name="nid21L" id="nid21L"></a>In the early days of computing, effective use of the computer was measured by whether or not the computer could do the math. Today the computer is viewed as a more sophisticated tool, performing tasks that should augment our performance as humans. It is difficult, though, to demonstrate that the computer has actually increased our performance in any substantive way. The level of inadequacy in augmentation is evident in the overheard computer complaints in restaurants; in the growth of the Human Computer Interaction (HCI) discipline; and in the enormous number of people employed in fields related to the individual use of computers. &nbsp;&nbsp; <a class="nid" title="21L" href="#nid21L">#</a></p>
<p><a name="nid21M" id="nid21M"></a>Computers pervade our lives but they do so in an intrusive way. We see them as a flaky friend who can do some cool things for us as long as we accept their fickle moods and interact with them according to unclear but omnipresent rules. This perception is unfortunate and should be reformed. &nbsp;&nbsp; <a class="nid" title="21M" href="#nid21M">#</a></p>
<p><a name="nid21N" id="nid21N"></a>Augmentation by computer holds a great deal of promise. There is much we can gain by harnessing that promise. While we remain attached to the view of the computer as something with which we hold a complex interaction we will be restrained in reaching the promise. When we view the computer as an interactive artifact the computer exists as our partner in the completion of important tasks. We ask the computer to do something and it, by proxy, does it for us. We should, instead, view the computer as a tool that we use to perform tasks: we use it so that we can do the important task. Calling the computer a tool may seem a simple matter of word choice but changing the view of the computer from interactive artifact to tool has a significant impact on how we think about the computer, what we expect of it, how we design for it and how we train for its use. &nbsp;&nbsp; <a class="nid" title="21N" href="#nid21N">#</a></p>
<h2><a name="nid21O" id="nid21O"></a>Augmentation &nbsp;&nbsp; <a class="nid" title="21O" href="#nid21O">#</a></h2>
<p><a name="nid21P" id="nid21P"></a>While Douglas Engelbart provides some of the earliest and most compelling reasons for why we, as a society, would want the computer to augment our capabilities (1962) Thomas Landauer provides the most cogent definition of what augmentation is for the individual. In the preface of <i>The Trouble with Computers</i>, Landauer (1995) recalls his first days as a technology researcher "I was captivated by the idea that computers offered a technology that could finally underwrite the kinds of power tools for human minds that motors have provided for our hands." Landauer's book is devoted to understanding why society has not yet reached his goal. Computers are pervasive but they have not given us the productivity gains that such ubiquity implies. &nbsp;&nbsp; <a class="nid" title="21P" href="#nid21P">#</a></p>
<p><a name="nid21Q" id="nid21Q"></a>Landauer distinguishes between two phases of computer applications. Phase one applications automate tasks "replacing humans" for the performance of "almost any process that science, engineering, and statistics have captured in their theories". Phase two applications, on the other hand, are applications that assist humans in tasks for which there is no established theory of action. Phase two applications include the very large body of office productivity applications, web browsers, and desktop operating systems; anything where the human uses the computer throughout the process. They are the applications we use to process information in flexible and potentially undefined ways. &nbsp;&nbsp; <a class="nid" title="21Q" href="#nid21Q">#</a></p>
<p><a name="nid21R" id="nid21R"></a>Both phase one and phase two applications pervade our lives so one would guess that they must provide us with some productive value. Landauer insists that while phase one applications do, applications that are clearly classed as phase two do not. The solution that Landauer provides for designing effective phase two applications involves evaluative feedback of the application creation process in the form of user-centered-design, user-centered-development and user-centered-deployment. &nbsp;&nbsp; <a class="nid" title="21R" href="#nid21R">#</a></p>
<h2><a name="nid21S" id="nid21S"></a>Interactive Artifacts &nbsp;&nbsp; <a class="nid" title="21S" href="#nid21S">#</a></h2>
<p><a name="nid21T" id="nid21T"></a>Phase two applications and the computers that run them are frequently characterized as interactive objects. Articulating the idea of the computer as an interactive artifact predates Lucy Suchman but the influential weight of her work, <i>Plans and Situated Actions</i>, has solidified the view as common wisdom. In this paper it is not the idea from <i>Plans and Situated Actions</i> that is being questioned, but the value of the view. It is clear that people do treat the computer as an interactive artifact and do make the conclusions about them that Suchman explains. It is not clear that there are performance benefits to be had from emphasizing the view in design. &nbsp;&nbsp; <a class="nid" title="21T" href="#nid21T">#</a></p>
<p><a name="nid21U" id="nid21U"></a>Suchman's book can and has been taken as a collection of design guidelines for interactive machines. To accept the guidelines we must first be convinced that the computer is perceived as interactive. She argues, "that the description of computational artifacts as interactive is supported by their <i>reactive</i>, <i>linguistic</i>, and internally <i>opaque</i> properties". The first two points are demonstrated in a straightforward way: modern computers react immediately to means of controls that are linguistic, not mechanistic. This process encourages the characterization of the machine as "a social object" with which the controller is communicating. &nbsp;&nbsp; <a class="nid" title="21U" href="#nid21U">#</a></p>
<p><a name="nid21V" id="nid21V"></a>The final point, opacity, is more complicated: Humans are likely to grant intention to someone or something that performs actions in a way that is difficult to understand. Suchman explains it well: "it is in part the internal complexity and opacity of the computer that invites an intentional stance. This is the case not only because users lack technical knowledge of the computer's internal workings but because, even for those who possess such knowledge, there is an 'irreducibility' to the computer as an object that is unique among human artifacts (Turkle 1984, p.272)...To refer to the behavior of the machine, then, one must speak of 'its' functionality. And once reified as an entity, the inclination to ascribe actions to the entity rather than to the parts is irresistible." &nbsp;&nbsp; <a class="nid" title="21V" href="#nid21V">#</a></p>
<p><a name="nid21W" id="nid21W"></a>Together the reactive, linguistic and opaque properties suggest a view of the computer as an interactive machine yet computers have not proven terribly effective in that role. Suchman suggests three goals for the more effective design of interactive machines: &nbsp;&nbsp; <a class="nid" title="21W" href="#nid21W">#</a></p>
<ol>
<li><a name="nid21X" id="nid21X"></a>Lessen the asymmetry between user and machine "by extending the access of the machine to the actions and circumstances of the user". &nbsp;&nbsp; <a class="nid" title="21X" href="#nid21X">#</a></li>
<li><a name="nid21Y" id="nid21Y"></a>Make "clear to the user the limits on the machine's access" to the actions and circumstances of the user. &nbsp;&nbsp; <a class="nid" title="21Y" href="#nid21Y">#</a></li>
<li><a name="nid21Z" id="nid21Z"></a>Find "ways of compensating for the machine's lack of access to the user's situation with computationally available alternatives". &nbsp;&nbsp; <a class="nid" title="21Z" href="#nid21Z">#</a></li>
</ol>
<p><a name="nid220" id="nid220"></a>Collectively these guidelines reinforce the view of the computer as an interactive device. Suchman is aware that there are limitations in this view: "[A]s long as machine actions are determined by stipulated conditions, machine interaction with the world, and with people in particular, will be limited by the intentions of the designers and their ability to anticipate and constrain the user’s actions". If Suchman is aware of these limitations, why does she encourage the view? What if computers are unable to effectively interact? What if they are just faking it and faking it poorly? &nbsp;&nbsp; <a class="nid" title="220" href="#nid220">#</a></p>
<h2><a name="nid221" id="nid221"></a>Classification and Categorization &nbsp;&nbsp; <a class="nid" title="221" href="#nid221">#</a></h2>
<p><a name="nid222" id="nid222"></a>Barring data transport problems, the reasons for the computer's inability to interact effectively can be traced back to a fundamental difference in the way humans and computers utilize information. There are many high level reasons but they can all be traced back to this: computers must classify information whereas humans may categorize. &nbsp;&nbsp; <a class="nid" title="222" href="#nid222">#</a></p>
<p><a name="nid223" id="nid223"></a>In the context of this paper classification and categorization take very strict definitions. Throughout the literature the terms are used ambiguously. They will not be here. Classification in this paper is defined as the "artificial process by which we organize things for presentation or later access. It involves the arbitrary creation of a group of classes, potentially arranged in a hierarchy, which have explicit definitions". Categorization is "an act of simplification to make apprehension and comprehension of the environment more efficient. Categories spring up out of necessity and because they are designed to replace the details of definition are themselves resistant to definition" (<a href="http://www.burningchrome.com:8000/~cdent/fiaarts/docs/1005018884:23962.html" class="extlink">Dent, 2001</a>). To put it more formally the intension and extension of a class are strictly defined and enumerable, respectively, while the intension and extension of a category are difficult to define and potentially impossible to enumerate, respectively. &nbsp;&nbsp; <a class="nid" title="223" href="#nid223">#</a></p>
<p><a name="nid224" id="nid224"></a>The flexibility of categories is the key to human interaction and learning. Categories are used to form the conceptual networks with which we make comparisons and draw inferences to create new knowledge. &nbsp;&nbsp; <a class="nid" title="224" href="#nid224">#</a></p>
<p><a name="nid225" id="nid225"></a>Computer programming is a derivative case of classification. It is the creation of arbitrary rules by which the computer is able to determine its behavior based on certain expected inputs (including a defined response to unexpected input). The classificatory structure provides a key by which the computer deduces the next step of action. &nbsp;&nbsp; <a class="nid" title="225" href="#nid225">#</a></p>
<p><a name="nid226" id="nid226"></a>Humans are not programmed. A human determines his or her behavior based on dynamic, flexible and adaptive reactions to the world in which they are situated. Understanding of that world is shaped by the conceptual categories that are in a constant state of adjustment. &nbsp;&nbsp; <a class="nid" title="226" href="#nid226">#</a></p>
<p><a name="nid227" id="nid227"></a>Unless there are significant changes in the nature of computing or the understanding of human cognition it is unlikely that the breach between computer-based classification and human-based categorization will be closed any time soon. &nbsp;&nbsp; <a class="nid" title="227" href="#nid227">#</a></p>
<p><a name="nid228" id="nid228"></a>With this understanding of classification and categorization we can take another look at Suchman to see that some of the problems in the interactivity model are larger than first glance suggests. The reactive property of the computer easily holds up to scrutiny: when the user does something there is a reaction. The other two properties that Suchman mentions, the linguistic and internally opaque natures of the computer, need to be reevaluated. &nbsp;&nbsp; <a class="nid" title="228" href="#nid228">#</a></p>
<p><a name="nid229" id="nid229"></a>The crucial evidence for disarming the linguistic property is quoted from Hayes and Reddy (1983) by Suchman herself: "Even though there are currently no truly gracefully interacting systems, none of our proposed components of graceful interaction appears individually to be much beyond the current state of the art, <i>at least for suitably restricted domains of discourse</i> [emphasis mine]." Suchman recognizes the limited domains of discourse and sees them as a problem in the understanding of human-machine interaction but does not speculate about the implications for achievement of unlimited domain interactivity. &nbsp;&nbsp; <a class="nid" title="229" href="#nid229">#</a></p>
<p><a name="nid22A" id="nid22A"></a>Computers are able to interact well in limited domains because the domains are constrained within classificatory structures. The rules for identifying and understanding the conceptual content of the interaction are constructed in the domain. Domains may grow and be combined, but they will continue to be large classificatory structures, strictly defined. Any ability that the computer shows that appears to be adaptability is rule based behavior determined by the structure of the domain. &nbsp;&nbsp; <a class="nid" title="22A" href="#nid22A">#</a></p>
<p><a name="nid22B" id="nid22B"></a>This understanding of rule-based behavior impacts the opacity of the computer and thus its appearance of intention. The rules, although complex, can be deduced over time. When we understand the computer to be following a set of rules its behavior is more clear. While the exact set of rules may not be clear, knowledge of the existence of the rules changes the perception of the computer. Instead of having intention of its own the computer has an intended purpose, one that is defined in the rules. &nbsp;&nbsp; <a class="nid" title="22B" href="#nid22B">#</a></p>
<h2><a name="nid22C" id="nid22C"></a>Problems with Interactivity &nbsp;&nbsp; <a class="nid" title="22C" href="#nid22C">#</a></h2>
<p><a name="nid22D" id="nid22D"></a>Characterizing the computer as an intentional interactive artifact lays the groundwork for several problems with computer use: it grants inappropriate power to the computer in the relationship between user and computer; it creates inappropriate expectations of the computer while at the same time lowering expectations of computer use; it lowers productivity. &nbsp;&nbsp; <a class="nid" title="22D" href="#nid22D">#</a></p>
<p><a name="nid22E" id="nid22E"></a>When the computer is viewed as having intention "the personification of the machine is reinforced" (Suchman). The interaction between the user and the computer is the locus of negotiation for performing the task. The computer takes a privileged stance, above the task. When in that stance we expect the computer to truly have, given the intention we have granted it, the intelligence, inferential power and adaptability that Suchman says we expect in social interaction. This is unfortunate because the computer is not intelligent; it cannot compare arbitrary and dynamic categories. It has no true and general inferential power; it cannot create links between categories. It is not truly adaptable; it can only create new classes of distinction according to a limited rule set. The expectation of intelligence sets up a poor mental model of the real situation. Such a model cannot be run to "predict the output which would result from some kind of input" (Eberts, 1994). &nbsp;&nbsp; <a class="nid" title="22E" href="#nid22E">#</a></p>
<p><a name="nid22F" id="nid22F"></a>Paradoxically, the intention that grants the high expectation of intelligence creates lower expectations of effective performance. We perceive an obscure purpose in the computer that we must decode and any difficulty in doing so must be our fault. When our interaction with the computer fails we think it is because we are unable to communicate as it does. As Norman (1988) says, when we should be blaming the design we are blaming ourselves. &nbsp;&nbsp; <a class="nid" title="22F" href="#nid22F">#</a></p>
<p><a name="nid22G" id="nid22G"></a>Designers that understand computers as intentional interactive devices expend considerable resources reinforcing the interactivity of the system. The animated office assistant in Microsoft Office 2000 is an omnipresent example. Landauer refers to this phenomenon when addressing the productivity paradox: "Many programs use the tremendous capacity lately available to offer computationally expensive, but for the user merely pleasant, graphic decorations, or hundreds of features that are rarely used by anyone" (1995). These features do little to enhance productivity. Not all the features enhance interactivity but they do draw attention to the primacy of the computer and its interface over the task. The user works with the fancy interface of the computer to have the computer perform the task. The proxy between user and task creates a constant need for interaction with the computer to determine the results of actions, results that must be interpreted. &nbsp;&nbsp; <a class="nid" title="22G" href="#nid22G">#</a></p>
<h2><a name="nid22H" id="nid22H"></a>The Computer as Tool &nbsp;&nbsp; <a class="nid" title="22H" href="#nid22H">#</a></h2>
<p><a name="nid22I" id="nid22I"></a>An alternate model of computer use is to view the computer as a tool with which the user performs tasks. In this model there is no proxy; the computer is subject to the user. The user performs--by <i>using</i> the computer--tasks that have identities separate from the computer. This view is based, in part, on Suchman's interactivity conclusions. Suchman concludes that since people are going to think of computers as interactive designers should make the interaction that must occur more effective. The tool model, in contrast, interprets Suchman's work to say that effective interaction is improbable and the existing interaction is a barrier to effective use. Therefore, designers should work to emphasize the tasks being performed instead of interaction. &nbsp;&nbsp; <a class="nid" title="22I" href="#nid22I">#</a></p>
<p><a name="nid22J" id="nid22J"></a>Support for this model is found in the nature of augmentation tasks and in the nature of craftwork. Augmentation, as Landauer describes it, is the use of computers to help us do things that we are already doing but cannot automate. These tasks involve the manipulation, communication and transmission of information. Tasks of this sort surround us as we become, daily, a knowledge and service based society. &nbsp;&nbsp; <a class="nid" title="22J" href="#nid22J">#</a></p>
<p><a name="nid22K" id="nid22K"></a>The fundamental work of an augmenting computer application is the representation and transmission of information. The computer is frequently involved in assisting in the creation or discovery of new representations of information. These new representations can lead to new knowledge. The computer's ability to assist in the formulation of new representations makes it an unusual tool, but still a tool. The computer itself is not the source of the information; it is merely representing the information. The computer is in effect a modeling domain as described by Barsalou (1992): "The modeling domain...captures information about the target domain and therefore supports the answering of questions about it". This model works for actions as dissimilar as writing a letter to Grandma and using a complex visualization based decision support system. Both the letter and visualization are representations of a target domain that the computer has created from inputs and a strict set of rules. These representations are the product of the computer. We use computers as a tool to craft representations. &nbsp;&nbsp; <a class="nid" title="22K" href="#nid22K">#</a></p>
<p><a name="nid22L" id="nid22L"></a>A crucial aspect of this observation is that while computers are tools for creating representations, the computer itself is a complicated structure of layered representations. As Winograd and Flores state: "One of the properties unique to the digital computer is the possibility of constructing systems that cascade levels of representation one on top of another to great depth" (1987). That is, the computer is a collection of representations used for creating and manipulating representations. &nbsp;&nbsp; <a class="nid" title="22L" href="#nid22L">#</a></p>
<p><a name="nid22M" id="nid22M"></a>In his discussion of craft based interface design Wroblewski (1991) distinguishes craft from manufacturing and art with two characteristics: Lack of separation between design and manufacture: "craft is any process that attempts to create a functional artifact without separating design from manufacture" and the unification of tools and materials. Use of augmenting computers is a craft: augmenting eschews design as a separate process because design is a set of guidelines or rules for manufacture--rules for automation. In augmentation the rules and goals are constantly being reviewed and adapted. The tools, materials and products of use from augmenting computers are representations. The computer itself is the tool. &nbsp;&nbsp; <a class="nid" title="22M" href="#nid22M">#</a></p>
<p><a name="nid22N" id="nid22N"></a>Craft demonstrates a third important characteristic: teaching proceeds as "apprenticeship and exposure to paradigmatic examples" (Wroblewski, 1991). This type of learning is conceptual change, the adjustment of categories of understanding. Roschelle (1995), when discussing the learning process in museums, says "conceptual change is a process of transition from ordinary ways of perceiving, directing attention, conceptualizing, reasoning and justifying". This sort of learning, based on the presence of existing, but flexible, categories, demonstrates the differences between computers and humans: "the analogy between minds and computers quickly breaks down where prior knowledge is concerned: you can reprogram a computer, completely replacing its existing program with a different one, whereas human minds must make new knowledge from old" (Roschelle). &nbsp;&nbsp; <a class="nid" title="22N" href="#nid22N">#</a></p>
<p><a name="nid22O" id="nid22O"></a>"Relatively young crafts foster rapid development of new tools and materials, while in well established crafts new tools and materials emerge at evolutionary time scales" (Wroblewski). This is evident in the relatively young craft of personal computing use. The last twenty-five years have been a hotbed of development in the use of computers as tools for augmentation. On the other hand, radical development in the considerably older use of computers as tools for automation has slowed. As computer use ages craft based use will mature. &nbsp;&nbsp; <a class="nid" title="22O" href="#nid22O">#</a></p>
<h2><a name="nid22P" id="nid22P"></a>Recommendations &nbsp;&nbsp; <a class="nid" title="22P" href="#nid22P">#</a></h2>
<p><a name="nid22Q" id="nid22Q"></a>When we view computers as tools and the act of using computers to manipulate knowledge as craft there are implications for the design of computing systems and the training environments that surround them. Some of these implications are essentially the same as existing recommendations in the HCI field but when cast into the tool and craft light resonate in a different way. The overarching premise is that design should focus on specific tasks while training should focus on conceptual understanding. &nbsp;&nbsp; <a class="nid" title="22Q" href="#nid22Q">#</a></p>
<h3><a name="nid22R" id="nid22R"></a>Design &nbsp;&nbsp; <a class="nid" title="22R" href="#nid22R">#</a></h3>
<p><a name="nid22S" id="nid22S"></a>Task analysis is of primary import in the design stage. Task analysis is done to identify the real task or problem being performed or solved by the planned application. That task should then be decomposed to smaller parts. The process of decomposition identifies the parts of the process that can be fully automated. Those parts that can be automated become the fundamental tools from which the application is composed. &nbsp;&nbsp; <a class="nid" title="22S" href="#nid22S">#</a></p>
<p><a name="nid22T" id="nid22T"></a>From a broad perspective the designer should consider the task and user first, not the tools being used. Only once the task, the user and the task's social context have been determined should there be any consideration of detailed design of the tools. This parallels Eason's proposition two for socio-technical design: "The design target must be to create a socio-technical system capable of serving organizational goals, not to create a technical system capable of delivering a technical service" (Eason, 1988). &nbsp;&nbsp; <a class="nid" title="22T" href="#nid22T">#</a></p>
<p><a name="nid22U" id="nid22U"></a>From a narrow perspective the designer should seek to create tools: devices or applications where the purpose is exposed, simple, and consistent with the task. The tools created should be designed for a long life performing the task for which they are designed. The tools created should interoperate effectively with other tools to allow the formation of complex grammatical structures capable of manipulating complex information representations. If complex tools are desired or required, they should exist as defined collections of tools that can be decomposed to smaller tools at will. &nbsp;&nbsp; <a class="nid" title="22U" href="#nid22U">#</a></p>
<p><a name="nid22V" id="nid22V"></a>In the design of interfaces the tasks and products of the tasks should take the foreground while the tools effectively fade away. Winograd and Flores believe that transparency in interfaces is the result of well-constrained domains: "A clearly and consciously organized ontology is the basis for the kind of simplicity that makes systems usable" (Winograd, 1987). Thus transparency can be achieved by the creation of well-defined classification structures for the computer. &nbsp;&nbsp; <a class="nid" title="22V" href="#nid22V">#</a></p>
<p><a name="nid22W" id="nid22W"></a>Simplicity is an important goal and may also be achieved by ensuring that the answer to all of Norman's "Seven Stages to Ask Design Questions" (1988) is "easily". The distillation of the questions is "can the user see what the device is for and figure out what will happen when they do something to it". A tool exposes its function and makes clear the mappings between action and result. &nbsp;&nbsp; <a class="nid" title="22W" href="#nid22W">#</a></p>
<p><a name="nid22X" id="nid22X"></a>To reinforce the tool nature of the application Suchman's (1987) second goal for the effective design of interactive machines is applicable: Make "clear to the user the limits on the machine's access" to the actions and circumstances of the user. &nbsp;&nbsp; <a class="nid" title="22X" href="#nid22X">#</a></p>
<p><a name="nid22Y" id="nid22Y"></a>Finally, because the user takes the focus in the use of effective tools that fade away, it remains imperative to focus on the evaluative feedback and user centered design, development and deployment that Landauer recommends. &nbsp;&nbsp; <a class="nid" title="22Y" href="#nid22Y">#</a></p>
<h3><a name="nid22Z" id="nid22Z"></a>Training &nbsp;&nbsp; <a class="nid" title="22Z" href="#nid22Z">#</a></h3>
<p><a name="nid230" id="nid230"></a>Jeremy Roschelle synthesizes much of the implications for training in the use of augmenting computers when advising designers of interactive educational installation in museums: &nbsp;&nbsp; <a class="nid" title="230" href="#nid230">#</a></p>
<div class="indent">
<p><a name="nid231" id="nid231"></a>First, designers should seek to <b>refine prior knowledge</b>, and not attempt to replace learners' understanding with their own. Second, designers must <b>anticipate a long-term learning process</b>, of which the short-term experience will form an incremental part. Third, designers must remember that <b>learning depends on social interaction</b>; conversations shape the form and content of the concepts that learners construct. Only part of specialized knowledge can exist explicitly as information; the rest must come from engagement in the practice of discourse of the community [his emphasis] (Roschelle, 1995). &nbsp;&nbsp; <a class="nid" title="231" href="#nid231">#</a></p>
</div>
<p><a name="nid232" id="nid232"></a>This advice coincides with the need to train for the broader picture, for the community within which computer use will occur. In that view the tools of computing are integrated into the day-to-day life of the users. &nbsp;&nbsp; <a class="nid" title="232" href="#nid232">#</a></p>
<p><a name="nid233" id="nid233"></a>The proper training for computing will create users that have what Dillon calls deep knowledge. "Users who posses 'deep' knowledge should be able to handle unfamiliar interactions by relying on their well developed conceptual model of the system and its overall manner of operation to guide their interactions" (Dillon, 1987). Developing a broad, flexible and complete conceptual model of computing should be the goal of training, not specific task oriented instructions or plans. &nbsp;&nbsp; <a class="nid" title="233" href="#nid233">#</a></p>
<p><a name="nid234" id="nid234"></a>In other words what designers and training should be trying to achieve are two divergent goals: specified plans for the computers and the conceptual breadth and depth for users to be effectively situated. Again we are back to Suchman. Situating the users can be achieved by the learning methods of craftspeople: exposure to broad concepts through apprenticeship and conceptual interlinking through paradigmatic examples (Wroblewski, 1991). &nbsp;&nbsp; <a class="nid" title="234" href="#nid234">#</a></p>
<p><a name="nid235" id="nid235"></a>The Ubiquitous Computing program at Xerox PARC displays a coherent manifestation of the tool-based approach to computing. The researchers there, responding to Suchman's observations of how "people <i>really</i> used technology, not just the way they claimed to use technology" (Weiser et al, 1999) began a research project. Its goal was to "answer what was wrong with the personal computer: too complex and hard to use; too demanding of attention; too isolated from other people and activities; and too dominating as it colonized our desktops and our lives." As their research proceeded they saw the potential of ubiquitous computing "for augmenting and improving work practices and knowledge sharing, by essentially getting the computers out of the way while amplifying human-to-human communication". Ubi-comp is distinguished by small, task-oriented devices with clearly defined purposes; in other words: tools. &nbsp;&nbsp; <a class="nid" title="235" href="#nid235">#</a></p>
<h2><a name="nid236" id="nid236"></a>Conclusion &nbsp;&nbsp; <a class="nid" title="236" href="#nid236">#</a></h2>
<p><a name="nid237" id="nid237"></a>The car and the book are powerful icons in the HCI literature. Is this because they are great examples of design or because the car and the book have become integral parts of our cultural understanding? Phase two computer applications are too new to be fully integrated, naturally, into our consciousness. Those implementations that excel at making us more effective and have a long life will come to be viewed like the car or the book. People will talk about them in the same way they do the car. When it is time for Johnny to learn how to use his information processing tool we won’t send him to a copy of <i>Learn to Use Your IPT in 7 hours</i>, instead his learning will be a part of his ongoing education and socialization and could very well involve spending time with Mom or Dad showing how things are done, just like how things happen when learning to drive a car. &nbsp;&nbsp; <a class="nid" title="237" href="#nid237">#</a></p>
<p><a name="nid238" id="nid238"></a>Society is hung up on interactivity yet is that really what we want to remember from an experience? When we have an important interaction with a person or event is it the nature of the interaction that is remembered or what we learned or achieved? &nbsp;&nbsp; <a class="nid" title="238" href="#nid238">#</a></p>
<p><a name="nid239" id="nid239"></a>Perceiving computers as tools may mean little for the short-term functional ways that we use, design and train for computers but it has the potential to alter, over the long term, how and why we use them. It is likely that the changes will occur in parallel with the development of the computing tools. Rapid development of new and different tools will continue, feeding the evolutionary selection of good methods and solutions. If we can shape this development to focus on the problems we are trying to solve with the computer and not the problems with the computer itself, we will be working toward a future where the augmenting computer is available but not intrusive, an effective tool for solving problems. &nbsp;&nbsp; <a class="nid" title="239" href="#nid239">#</a></p>
<h2><a name="nid23A" id="nid23A"></a>References &nbsp;&nbsp; <a class="nid" title="23A" href="#nid23A">#</a></h2>
<p><a name="nid23B" id="nid23B"></a>Barsalou, L. W. (1992). Representation. In <i>Cognitive psychology: an overview for cognitive scientists</i> (p. 52-56 only). Cambridge: Cambridge University Press. &nbsp;&nbsp; <a class="nid" title="23B" href="#nid23B">#</a></p>
<p><a name="nid23C" id="nid23C"></a>Dent, C. (2001). Studer: Classification v. Categorization. Retrieved December 3, 2001 from <a href="http://www.burningchrome.com:8000/~cdent/fiaarts/docs/1005018884:23962.html" class="extlink">http://www.burningchrome.com:8000/~cdent/fiaarts/docs/1005018884:23962.html</a>. &nbsp;&nbsp; <a class="nid" title="23C" href="#nid23C">#</a></p>
<p><a name="nid23D" id="nid23D"></a>Dillon, A. (1987). Knowledge acquisition and conceptual models: a cognitive analysis of the interface. In: D. Diaper and R. Winder (eds.) <i>People and computers III</i> (p. 371-379). Cambridge: Cambridge University Press. &nbsp;&nbsp; <a class="nid" title="23D" href="#nid23D">#</a></p>
<p><a name="nid23E" id="nid23E"></a>Eason, K. (1988). Towards the socio-technical design of information technology. In <i>Information technology and organizational change</i> (p. 44-59). London: Taylor and Francis. &nbsp;&nbsp; <a class="nid" title="23E" href="#nid23E">#</a></p>
<p><a name="nid23F" id="nid23F"></a>Eberts, R. (1994). Mental models. In <i>User interface design</i> (p. 139-163). New York: Prentice-Hall. &nbsp;&nbsp; <a class="nid" title="23F" href="#nid23F">#</a></p>
<p><a name="nid23G" id="nid23G"></a>Engelbart, D. C. (1962). <i>Augmenting human intellect: A conceptual framework</i>. Retrieved December 3, 2001 from <a href="http://www.histech.rwth-aachen.de/www/quellen/engelbart/ahi62index.html" class="extlink">http://www.histech.rwth-aachen.de/www/quellen/engelbart/ahi62index.html</a>. (Link has gone stale, also available from: <a href="http://sloan.stanford.edu/mousesite/EngelbartPapers/B5_F18_ConceptFrameworkInd.html" class="extlink">http://sloan.stanford.edu/mousesite/EngelbartPapers/B5_F18_ConceptFrameworkInd.html</a> &nbsp;&nbsp; <a class="nid" title="23G" href="#nid23G">#</a></p>
<p><a name="nid23H" id="nid23H"></a>Hayes, P. &amp; Reddy, D.R. (1983). Steps toward graceful integration in spoken and written man-machine communication. <i>International journal of man-machine studies</i> 19 (p. 231-284). Cited in Suchman, L. (1987). &nbsp;&nbsp; <a class="nid" title="23H" href="#nid23H">#</a></p>
<p><a name="nid23I" id="nid23I"></a>Landauer, T. (1995). <i>The trouble with computers</i>. Cambridge, MA: MIT Press. &nbsp;&nbsp; <a class="nid" title="23I" href="#nid23I">#</a></p>
<p><a name="nid23J" id="nid23J"></a>Norman, D. (1988). The psychology of everyday actions. In <i>The psychology of everyday things</i> (p. 34-53). New York: Basic Books. &nbsp;&nbsp; <a class="nid" title="23J" href="#nid23J">#</a></p>
<p><a name="nid23K" id="nid23K"></a>Roschelle, J. (1995). Learning in interactive environments: prior knowledge and new experience. <i>Public institutions for personal learning: establishing a research agenda</i>. Falk, J. &amp; Dierking, L. (eds.). Washington: American Association of Museums. Retrieved November 26, 2001 from <a href="http://www.astc.org/resource/educator/priorknw.htm" class="extlink">http://www.astc.org/resource/educator/priorknw.htm</a> &nbsp;&nbsp; <a class="nid" title="23K" href="#nid23K">#</a></p>
<p><a name="nid23L" id="nid23L"></a>Suchman, L. (1987). Interactive artifacts. In <i>Plans and situated actions</i> (p. 5-26). New York: Cambridge University Press. &nbsp;&nbsp; <a class="nid" title="23L" href="#nid23L">#</a></p>
<p><a name="nid23M" id="nid23M"></a>Weiser, M., Gold, R., Brown, J.S., (1999). The origins of ubiquitous computing research at PARC in the late 1980s. <i>IBM systems journal</i> 38(4), 693-696. &nbsp;&nbsp; <a class="nid" title="23M" href="#nid23M">#</a></p>
<p><a name="nid23N" id="nid23N"></a>Winograd, T. &amp; Flores, F. (1987). <i>Understanding computers and cognition</i>. Norwood, NJ: Ablex Publishing. &nbsp;&nbsp; <a class="nid" title="23N" href="#nid23N">#</a></p>
<p><a name="nid23O" id="nid23O"></a>Wroblewski, D. (1991). The construction of human-computer interfaces considered as craft. In Karat (ed.) <i>Taking software design seriously</i>. NY: Academic Press, p. 1-19. &nbsp;&nbsp; <a class="nid" title="23O" href="#nid23O">#</a></p>
</body>
</html>
